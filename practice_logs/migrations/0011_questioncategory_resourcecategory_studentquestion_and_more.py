# Generated by Django 4.2.22 on 2025-06-11 09:24

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import practice_logs.models.teacher_resources


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('practice_logs', '0010_add_teacher_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='分類名稱')),
                ('description', models.TextField(blank=True, verbose_name='分類描述')),
                ('icon', models.CharField(blank=True, help_text='FontAwesome圖標類別名稱', max_length=50, verbose_name='圖標類別')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='排序')),
                ('is_active', models.BooleanField(default=True, verbose_name='啟用')),
            ],
            options={
                'verbose_name': '問題分類',
                'verbose_name_plural': '問題分類',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='分類名稱')),
                ('description', models.TextField(blank=True, verbose_name='分類描述')),
                ('icon', models.CharField(default='folder', help_text='FontAwesome圖標名稱', max_length=50, verbose_name='圖標')),
                ('color', models.CharField(default='#6DB3D1', help_text='用於UI顯示的顏色', max_length=7, verbose_name='顏色代碼')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': '資源分類',
                'verbose_name_plural': '資源分類',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StudentQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='簡短描述您的問題', max_length=200, verbose_name='問題標題')),
                ('question_text', models.TextField(help_text='詳細說明您的問題', verbose_name='問題詳情')),
                ('question_type', models.CharField(choices=[('technique', '演奏技巧'), ('theory', '樂理知識'), ('piece', '曲目相關'), ('practice', '練習方法'), ('equipment', '器材設備'), ('other', '其他')], default='technique', max_length=20, verbose_name='問題類型')),
                ('priority', models.CharField(choices=[('low', '低'), ('medium', '中'), ('high', '高'), ('urgent', '緊急')], default='medium', max_length=10, verbose_name='優先級')),
                ('status', models.CharField(choices=[('pending', '待回答'), ('answered', '已回答'), ('follow_up', '需追蹤'), ('resolved', '已解決')], default='pending', max_length=20, verbose_name='狀態')),
                ('attachment', models.FileField(blank=True, help_text='可上傳圖片、音頻或影片', null=True, upload_to='questions/attachments/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'mp3', 'wav', 'mp4', 'mov', 'pdf'])], verbose_name='附件')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='提問時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='回答時間')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='瀏覽次數')),
                ('is_public', models.BooleanField(default=True, help_text='是否允許其他學生查看此問題', verbose_name='公開問題')),
                ('tags', models.CharField(blank=True, help_text='用逗號分隔多個標籤', max_length=200, verbose_name='標籤')),
                ('related_practice_log', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='practice_logs.practicelog', verbose_name='相關練習記錄')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asked_questions', to=settings.AUTH_USER_MODEL, verbose_name='提問學生')),
                ('teacher', models.ForeignKey(blank=True, help_text='可選擇特定教師回答', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_questions', to=settings.AUTH_USER_MODEL, verbose_name='指定教師')),
            ],
            options={
                'verbose_name': '學生提問',
                'verbose_name_plural': '學生提問',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='資源標題')),
                ('description', models.TextField(help_text='詳細描述這個資源的內容和用途', verbose_name='資源描述')),
                ('resource_type', models.CharField(choices=[('sheet_music', '樂譜'), ('video_tutorial', '教學影片'), ('audio', '音頻資料'), ('document', '文件'), ('image', '圖片'), ('link', '外部連結'), ('other', '其他')], max_length=20, verbose_name='資源類型')),
                ('difficulty_level', models.CharField(choices=[('beginner', '初級'), ('intermediate', '中級'), ('advanced', '高級'), ('all', '所有程度')], default='all', max_length=20, verbose_name='難度等級')),
                ('file', models.FileField(blank=True, null=True, upload_to=practice_logs.models.teacher_resources.resource_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png', 'mp3', 'wav', 'mp4', 'mov', 'doc', 'docx', 'ppt', 'pptx'])], verbose_name='檔案')),
                ('external_link', models.URLField(blank=True, help_text='YouTube、Google Drive或其他網站連結', max_length=500, verbose_name='外部連結')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='resources/thumbnails/', verbose_name='縮圖')),
                ('tags', models.CharField(blank=True, help_text='用逗號分隔多個標籤', max_length=300, verbose_name='標籤')),
                ('composer', models.CharField(blank=True, help_text='如果是樂譜，請填寫作曲家名稱', max_length=100, verbose_name='作曲家')),
                ('piece_name', models.CharField(blank=True, max_length=200, verbose_name='曲目名稱')),
                ('is_public', models.BooleanField(default=False, help_text='是否允許所有學生查看', verbose_name='公開資源')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='下載次數')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='瀏覽次數')),
                ('version', models.CharField(default='1.0', max_length=20, verbose_name='版本')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='上傳時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resources', to='practice_logs.resourcecategory', verbose_name='分類')),
                ('shared_with_students', models.ManyToManyField(blank=True, limit_choices_to={'profile__role': 'student'}, related_name='shared_resources', to=settings.AUTH_USER_MODEL, verbose_name='分享給特定學生')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_resources', to=settings.AUTH_USER_MODEL, verbose_name='教師')),
            ],
            options={
                'verbose_name': '教學資源',
                'verbose_name_plural': '教學資源',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(verbose_name='回答內容')),
                ('voice_answer', models.FileField(blank=True, null=True, upload_to='answers/voice/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp3', 'wav', 'm4a'])], verbose_name='語音回答')),
                ('video_answer', models.FileField(blank=True, null=True, upload_to='answers/video/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'mov', 'avi'])], verbose_name='影片回答')),
                ('reference_links', models.TextField(blank=True, help_text='相關的學習資源連結，每行一個', verbose_name='參考連結')),
                ('is_helpful', models.BooleanField(blank=True, null=True, verbose_name='學生認為有幫助')),
                ('student_feedback', models.TextField(blank=True, verbose_name='學生回饋')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='回答時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='practice_logs.studentquestion', verbose_name='相關問題')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_answers', to=settings.AUTH_USER_MODEL, verbose_name='回答教師')),
            ],
            options={
                'verbose_name': '教師回答',
                'verbose_name_plural': '教師回答',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technique_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='技巧分數')),
                ('musicality_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='音樂性分數')),
                ('rhythm_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='節奏分數')),
                ('sight_reading_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='視譜能力分數')),
                ('theory_score', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='樂理知識分數')),
                ('current_level', models.CharField(help_text='例如：初級、中級、高級', max_length=50, verbose_name='當前程度')),
                ('current_pieces', models.TextField(blank=True, verbose_name='目前練習曲目')),
                ('completed_pieces', models.TextField(blank=True, verbose_name='已完成曲目')),
                ('short_term_goals', models.TextField(blank=True, help_text='1-3個月內的目標', verbose_name='短期目標')),
                ('long_term_goals', models.TextField(blank=True, help_text='6個月以上的目標', verbose_name='長期目標')),
                ('average_practice_minutes', models.PositiveIntegerField(default=0, verbose_name='平均每日練習時間（分鐘）')),
                ('practice_consistency', models.FloatField(default=0, help_text='過去30天的練習頻率', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='練習穩定度（%）')),
                ('achievements', models.TextField(blank=True, help_text='考試成績、比賽獎項等', verbose_name='獲得成就')),
                ('teacher_comments', models.TextField(blank=True, help_text='對學生整體進度的評價', verbose_name='教師評語')),
                ('last_assessment_date', models.DateField(default=django.utils.timezone.now, verbose_name='最後評估日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to=settings.AUTH_USER_MODEL, verbose_name='學生')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to=settings.AUTH_USER_MODEL, verbose_name='教師')),
            ],
            options={
                'verbose_name': '學生進度',
                'verbose_name_plural': '學生進度',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ResourceUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('view', '瀏覽'), ('download', '下載'), ('share', '分享')], max_length=20, verbose_name='動作')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='時間')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='practice_logs.teacherresource', verbose_name='資源')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_usage_logs', to=settings.AUTH_USER_MODEL, verbose_name='使用者')),
            ],
            options={
                'verbose_name': '資源使用記錄',
                'verbose_name_plural': '資源使用記錄',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ResourceCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='集合名稱')),
                ('description', models.TextField(blank=True, verbose_name='集合描述')),
                ('is_public', models.BooleanField(default=False, verbose_name='公開集合')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='排序')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('resources', models.ManyToManyField(related_name='collections', to='practice_logs.teacherresource', verbose_name='包含的資源')),
                ('shared_with_students', models.ManyToManyField(blank=True, limit_choices_to={'profile__role': 'student'}, related_name='shared_collections', to=settings.AUTH_USER_MODEL, verbose_name='分享給特定學生')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_collections', to=settings.AUTH_USER_MODEL, verbose_name='教師')),
            ],
            options={
                'verbose_name': '資源集合',
                'verbose_name_plural': '資源集合',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LessonSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_date', models.DateField(verbose_name='上課日期')),
                ('start_time', models.TimeField(verbose_name='開始時間')),
                ('duration_minutes', models.PositiveIntegerField(default=60, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(180)], verbose_name='課程時長（分鐘）')),
                ('lesson_type', models.CharField(choices=[('regular', '常規課程'), ('makeup', '補課'), ('trial', '試聽課'), ('masterclass', '大師班'), ('group', '團體課'), ('online', '線上課程')], default='regular', max_length=20, verbose_name='課程類型')),
                ('status', models.CharField(choices=[('scheduled', '已排定'), ('completed', '已完成'), ('cancelled', '已取消'), ('rescheduled', '已改期'), ('no_show', '學生缺席')], default='scheduled', max_length=20, verbose_name='狀態')),
                ('topic', models.CharField(help_text='本次課程的主要內容', max_length=200, verbose_name='課程主題')),
                ('objectives', models.TextField(blank=True, help_text='本次課程希望達成的目標', verbose_name='學習目標')),
                ('materials_needed', models.TextField(blank=True, help_text='學生需要準備的樂譜或其他材料', verbose_name='所需教材')),
                ('lesson_notes', models.TextField(blank=True, help_text='課程中的重點記錄', verbose_name='課程筆記')),
                ('homework', models.TextField(blank=True, help_text='學生需要完成的練習任務', verbose_name='課後作業')),
                ('student_performance', models.PositiveIntegerField(blank=True, help_text='1-5分評價學生本次課程的表現', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='學生表現評分')),
                ('pieces_covered', models.TextField(blank=True, help_text='本次課程練習的曲目', verbose_name='練習曲目')),
                ('skills_focus', models.CharField(blank=True, help_text='本次課程著重的技巧', max_length=200, verbose_name='技巧重點')),
                ('original_date', models.DateField(blank=True, help_text='如果是改期的課程，記錄原本的日期', null=True, verbose_name='原定日期')),
                ('reschedule_reason', models.CharField(blank=True, max_length=200, verbose_name='改期原因')),
                ('reminder_sent', models.BooleanField(default=False, verbose_name='已發送提醒')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_lessons', to=settings.AUTH_USER_MODEL, verbose_name='學生')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_lessons', to=settings.AUTH_USER_MODEL, verbose_name='教師')),
            ],
            options={
                'verbose_name': '課程排程',
                'verbose_name_plural': '課程排程',
                'ordering': ['-lesson_date', '-start_time'],
            },
        ),
        migrations.CreateModel(
            name='LessonNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pre_lesson_plan', models.TextField(blank=True, verbose_name='課前計畫')),
                ('warm_up_exercises', models.TextField(blank=True, verbose_name='熱身練習')),
                ('technique_work', models.TextField(blank=True, verbose_name='技巧練習')),
                ('repertoire_covered', models.TextField(blank=True, verbose_name='曲目練習')),
                ('problems_identified', models.TextField(blank=True, verbose_name='發現的問題')),
                ('solutions_provided', models.TextField(blank=True, verbose_name='提供的解決方案')),
                ('improvements_noted', models.TextField(blank=True, verbose_name='進步之處')),
                ('areas_need_work', models.TextField(blank=True, verbose_name='需要加強的地方')),
                ('next_lesson_plan', models.TextField(blank=True, verbose_name='下次課程計畫')),
                ('parent_communication', models.TextField(blank=True, help_text='需要告知家長的事項', verbose_name='家長溝通記錄')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detailed_note', to='practice_logs.lessonschedule', verbose_name='相關課程')),
            ],
            options={
                'verbose_name': '課程詳細筆記',
                'verbose_name_plural': '課程詳細筆記',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=300, verbose_name='問題')),
                ('answer', models.TextField(verbose_name='答案')),
                ('related_video', models.URLField(blank=True, help_text='YouTube或其他影片連結', verbose_name='相關影片')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='瀏覽次數')),
                ('helpful_count', models.PositiveIntegerField(default=0, verbose_name='有幫助次數')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='排序')),
                ('is_featured', models.BooleanField(default=False, verbose_name='精選問題')),
                ('is_active', models.BooleanField(default=True, verbose_name='啟用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新時間')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='practice_logs.questioncategory', verbose_name='分類')),
                ('related_resources', models.ManyToManyField(blank=True, related_name='related_faqs', to='practice_logs.teacherresource', verbose_name='相關資源')),
            ],
            options={
                'verbose_name': '常見問題',
                'verbose_name_plural': '常見問題',
                'ordering': ['category', 'order', '-helpful_count'],
            },
        ),
        migrations.AddIndex(
            model_name='teacherresource',
            index=models.Index(fields=['teacher', 'resource_type'], name='practice_lo_teacher_c92644_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherresource',
            index=models.Index(fields=['category', 'difficulty_level'], name='practice_lo_categor_52f34e_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherresource',
            index=models.Index(fields=['is_public'], name='practice_lo_is_publ_f55961_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherresource',
            index=models.Index(fields=['created_at'], name='practice_lo_created_fdb654_idx'),
        ),
        migrations.AddIndex(
            model_name='teacheranswer',
            index=models.Index(fields=['question', 'created_at'], name='practice_lo_questio_c83e94_idx'),
        ),
        migrations.AddIndex(
            model_name='teacheranswer',
            index=models.Index(fields=['teacher'], name='practice_lo_teacher_a48f96_idx'),
        ),
        migrations.AddIndex(
            model_name='studentquestion',
            index=models.Index(fields=['student', 'status'], name='practice_lo_student_b72191_idx'),
        ),
        migrations.AddIndex(
            model_name='studentquestion',
            index=models.Index(fields=['teacher', 'status'], name='practice_lo_teacher_1ad270_idx'),
        ),
        migrations.AddIndex(
            model_name='studentquestion',
            index=models.Index(fields=['question_type', 'priority'], name='practice_lo_questio_2a4cd8_idx'),
        ),
        migrations.AddIndex(
            model_name='studentquestion',
            index=models.Index(fields=['created_at'], name='practice_lo_created_f48a70_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['student', 'teacher'], name='practice_lo_student_6f2b38_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['last_assessment_date'], name='practice_lo_last_as_c1a7c4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentprogress',
            unique_together={('student', 'teacher')},
        ),
        migrations.AddIndex(
            model_name='resourceusagelog',
            index=models.Index(fields=['resource', 'timestamp'], name='practice_lo_resourc_64dff8_idx'),
        ),
        migrations.AddIndex(
            model_name='resourceusagelog',
            index=models.Index(fields=['user', 'action'], name='practice_lo_user_id_3aa94a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='resourcecollection',
            unique_together={('teacher', 'name')},
        ),
        migrations.AddIndex(
            model_name='lessonschedule',
            index=models.Index(fields=['teacher', 'lesson_date'], name='practice_lo_teacher_39fcd0_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonschedule',
            index=models.Index(fields=['student', 'lesson_date'], name='practice_lo_student_77a35a_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonschedule',
            index=models.Index(fields=['status'], name='practice_lo_status_bf652c_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonschedule',
            index=models.Index(fields=['lesson_date', 'start_time'], name='practice_lo_lesson__bc7766_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lessonschedule',
            unique_together={('teacher', 'lesson_date', 'start_time')},
        ),
        migrations.AddIndex(
            model_name='faq',
            index=models.Index(fields=['category', 'is_active'], name='practice_lo_categor_00836f_idx'),
        ),
        migrations.AddIndex(
            model_name='faq',
            index=models.Index(fields=['is_featured'], name='practice_lo_is_feat_7b9116_idx'),
        ),
    ]
